name: Supabase Backup and Restore

on:
  schedule:
    # Runs daily at 2:00 AM IST (20:30 UTC)
    - cron: '30 20 * * *'
  workflow_dispatch:

jobs:
  backup-and-restore:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL 17 client tools
        run: |
          echo "üîß Installing PostgreSQL 17 client..."
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
            sudo gpg --dearmor -o /usr/share/keyrings/postgresql-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" | \
            sudo tee /etc/apt/sources.list.d/pgdg.list
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17

      - name: Dump Supabase source database with compression
        env:
          SRC_DB: ${{ secrets.SRC_DB }}
        run: |
          set -e
          DATE=$(date +%Y-%m-%d_%H-%M)
          BACKUP_FILE="supabase_backup_$DATE.dump"

          echo "üü¢ Starting pg_dump with native compression..."
          /usr/lib/postgresql/17/bin/pg_dump \
            --no-owner --no-privileges --no-publications --no-subscriptions --no-tablespaces \
            --exclude-schema=auth \
            --exclude-schema=extensions \
            --exclude-schema=pgbouncer \
            --exclude-schema=storage \
            --exclude-schema=supabase_functions \
            --exclude-schema=supabase_migrations \
            --exclude-schema=realtime \
            --exclude-schema=_realtime \
            -Fc -Z6 -v -d "$SRC_DB" -f "$BACKUP_FILE"

          echo "‚úÖ Compressed dump complete"
          FILE_SIZE=$(stat -c%s "$BACKUP_FILE" 2>/dev/null || stat -f%z "$BACKUP_FILE")
          echo "üì¶ Backup size: $((FILE_SIZE / 1024 / 1024)) MB"
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Upload backup as GitHub artifact
        uses: actions/upload-artifact@v4
        with:
          name: supabase-db-backup
          path: ${{ env.BACKUP_FILE }}
          retention-days: 7

      - name: Restore backup into destination Supabase
        if: success()
        env:
          DEST_DB: ${{ secrets.DEST_DB }}
        run: |
          set +e  # Handle errors manually
          echo "üü¢ Restoring backup into destination Supabase..."
          
          /usr/lib/postgresql/17/bin/pg_restore \
            --no-owner --no-privileges --no-comments \
            -v -d "$DEST_DB" "${{ env.BACKUP_FILE }}" 2>&1 | tee restore.log
          
          RESTORE_EXIT_CODE=${PIPESTATUS[0]}
          
          # Filter out expected Supabase system errors
          CRITICAL_ERRORS=$(grep -i "error:" restore.log | \
            grep -v "event trigger" | \
            grep -v "pgrst_ddl_watch" | \
            grep -v "pgrst_drop_watch" | \
            grep -v "issue_graphql_placeholder" | \
            grep -v "grant_pg_net_access" | \
            grep -v "already exists" || true)
          
          if [ -n "$CRITICAL_ERRORS" ]; then
            echo "‚ùå Critical errors found during restore:"
            echo "$CRITICAL_ERRORS"
            exit 1
          fi
          
          TOTAL_ERRORS=$(grep -c "error:" restore.log || echo "0")
          WARNINGS=$(grep -c "warning:" restore.log || echo "0")
          echo "‚úÖ Restore completed successfully"
          echo "üìä Summary: $TOTAL_ERRORS expected errors filtered, $WARNINGS warnings"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Backup or restore process failed!"
          echo "Check the logs above for details."